# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ArFe0n6Zkj-gDqus86jTXe7S2MRGXGKX
"""

# Install required packages if needed


import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output

# Gene data
gene_data = [
    {"Accession": "MN316643.1", "Isolate": "Agnes_661xx2018", "Start": 105, "End": 1347, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW915530.1", "Isolate": "IR-UT-ZGNARM 40020", "Start": 120, "End": 1370, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660860.1", "Isolate": "IR-UT-ZGNARM 9360", "Start": 115, "End": 1355, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660859.1", "Isolate": "IR UT-ZGNARM 9429", "Start": 98, "End": 1320, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660858.1", "Isolate": "IR-UT-ZGNARM 9171", "Start": 101, "End": 1315, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660857.1", "Isolate": "IR-UT-ZGNARM 9325", "Start": 125, "End": 1380, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660856.1", "Isolate": "IR-UT-ZGNARM 9299", "Start": 99, "End": 1332, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990715.1", "Isolate": "Carp edema virus 4a protein", "Start": 102, "End": 1330, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990714.1", "Isolate": "F238", "Start": 95, "End": 1325, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990713.1", "Isolate": "LE2", "Start": 115, "End": 1372, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990712.1", "Isolate": "LE1", "Start": 122, "End": 1381, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990711.1", "Isolate": "F129", "Start": 117, "End": 1368, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990709.1", "Isolate": "F14", "Start": 110, "End": 1350, "Strand": "+", "Gene": "p4a"}
]

df = pd.DataFrame(gene_data)
df["Length (bp)"] = df["End"] - df["Start"] + 1

# Widgets
display_checkbox = widgets.Checkbox(description="Display Table")
download_button = widgets.Button(description="Download CSV")
plot_button = widgets.Button(description="Show Plot")
output_area = widgets.Output()

def plot_gene_lengths():
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.barh(df["Isolate"], df["Length (bp)"], color="mediumseagreen")
    ax.set_xlabel("Length (bp)")
    ax.set_title("p4a Gene Lengths in 13 Isolates (Common Carp)")
    plt.tight_layout()
    plt.show()

def save_csv():
    df.to_csv("/content/p4a_gene_annotations.csv", index=False)

def on_download_clicked(b):
    save_csv()
    with output_area:
        clear_output()
        print("✅ CSV downloaded to /content/p4a_gene_annotations.csv")

def on_display_toggled(change):
    with output_area:
        clear_output()
        if change["new"]:
            display(df)

def on_plot_clicked(b):
    with output_area:
        clear_output()
        plot_gene_lengths()

# Event bindings
display_checkbox.observe(on_display_toggled, names="value")
download_button.on_click(on_download_clicked)
plot_button.on_click(on_plot_clicked)

# Display UI
display(widgets.VBox([display_checkbox, download_button, plot_button, output_area]))

import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output
import os

# Gene data for 13 isolates of the p4a gene
gene_data = [
    {"Accession": "MN316643.1", "Isolate": "Agnes_661xx2018", "Start": 105, "End": 1347, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW915530.1", "Isolate": "IR-UT-ZGNARM 40020", "Start": 120, "End": 1370, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660860.1", "Isolate": "IR-UT-ZGNARM 9360", "Start": 115, "End": 1355, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660859.1", "Isolate": "IR UT-ZGNARM 9429", "Start": 98, "End": 1320, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660858.1", "Isolate": "IR-UT-ZGNARM 9171", "Start": 101, "End": 1315, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660857.1", "Isolate": "IR-UT-ZGNARM 9325", "Start": 125, "End": 1380, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MW660856.1", "Isolate": "IR-UT-ZGNARM 9299", "Start": 99, "End": 1332, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990715.1", "Isolate": "Carp edema virus 4a protein", "Start": 102, "End": 1330, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990714.1", "Isolate": "F238", "Start": 95, "End": 1325, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990713.1", "Isolate": "LE2", "Start": 115, "End": 1372, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990712.1", "Isolate": "LE1", "Start": 122, "End": 1381, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990711.1", "Isolate": "F129", "Start": 117, "End": 1368, "Strand": "+", "Gene": "p4a"},
    {"Accession": "MK990709.1", "Isolate": "F14", "Start": 110, "End": 1350, "Strand": "+", "Gene": "p4a"}
]

# Convert to pandas DataFrame and calculate lengths
df = pd.DataFrame(gene_data)
df["Length (bp)"] = df["End"] - df["Start"] + 1

# Widget for displaying table
display_checkbox = widgets.Checkbox(description="Display Table")
download_button = widgets.Button(description="Download CSV")
download_gff_button = widgets.Button(description="Download GFF3")
plot_button = widgets.Button(description="Show Plot")
output_area = widgets.Output()

# Function to plot the gene lengths
def plot_gene_lengths():
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.barh(df["Isolate"], df["Length (bp)"], color="mediumseagreen")
    ax.set_xlabel("Length (bp)")
    ax.set_title("p4a Gene Lengths in 13 Isolates (Common Carp)")
    plt.tight_layout()
    fig.savefig("/content/p4a_gene_lengths.png")  # Save the figure as image
    plt.show()

# Function to save CSV file
def save_csv():
    df.to_csv("/content/p4a_gene_annotations.csv", index=False)

# Function to generate and save GFF3 file
def save_gff3():
    with open("/content/p4a_gene_annotations.gff3", "w") as f:
        f.write("##gff-version 3\n")
        for _, row in df.iterrows():
            f.write(f"{row['Accession']}\tNCBI\tgene\t{row['Start']}\t{row['End']}\t.\t{row['Strand']}\t.\tID={row['Isolate']};Name={row['Gene']}\n")
            f.write(f"{row['Accession']}\tNCBI\tCDS\t{row['Start']}\t{row['End']}\t.\t{row['Strand']}\t0\tID={row['Isolate']}_CDS\n")

# Event handlers
def on_download_clicked(b):
    save_csv()
    with output_area:
        clear_output()
        print("✅ CSV downloaded to /content/p4a_gene_annotations.csv")

def on_gff_download_clicked(b):
    save_gff3()
    with output_area:
        clear_output()
        print("✅ GFF3 downloaded to /content/p4a_gene_annotations.gff3")

def on_display_toggled(change):
    with output_area:
        clear_output()
        if change["new"]:
            display(df)

def on_plot_clicked(b):
    with output_area:
        clear_output()
        plot_gene_lengths()

# Event bindings
display_checkbox.observe(on_display_toggled, names="value")
download_button.on_click(on_download_clicked)
download_gff_button.on_click(on_gff_download_clicked)
plot_button.on_click(on_plot_clicked)

# Display widgets
display(widgets.VBox([display_checkbox, download_button, download_gff_button, plot_button, output_area]))

# Install required libraries


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from Bio import Entrez, SeqIO
from io import StringIO
import requests

# Step 1: Fetching gene data using NCBI Entrez API

def fetch_gene_data(accession_id):
    try:
        # Searching for the accession
        Entrez.email = "your-email@example.com"  # Use your email
        handle = Entrez.efetch(db="nucleotide", id=accession_id, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()

        # Extracting relevant information
        gene_info = {
            'Accession': record.id,
            'Gene Product': record.description,
            'Length': len(record.seq),
            'Sequence': record.seq
        }

        return gene_info

    except Exception as e:
        print(f"Error fetching data for {accession_id}: {e}")
        return None

# Step 2: Creating a function to plot data for gene mapping

def plot_gene_coordinates(df):
    # Plotting Gene Length vs Count
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Accession', y='Length', data=df, palette='viridis')
    plt.title('Gene Length vs Accession')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()

    # Plotting Distribution of Gene Sequences
    plt.figure(figsize=(10, 6))
    sns.histplot(df['Length'], kde=True, color='blue')
    plt.title('Distribution of Gene Lengths')
    plt.tight_layout()
    plt.show()

# Step 3: Function to generate a CSV report

def generate_csv_report(df):
    # Save as CSV
    file_name = "p4a_gene_report.csv"
    df.to_csv(file_name, index=False)
    print(f"CSV report generated at: {file_name}")
    return file_name

# Step 4: Main function to process multiple accessions and visualize results

def process_multiple_accessions(accession_list):
    gene_data = []
    for accession in accession_list:
        data = fetch_gene_data(accession)
        if data:
            gene_data.append(data)

    if not gene_data:
        print("No valid data found for the selected accessions.")
        return

    # Convert to DataFrame for easy visualization
    df = pd.DataFrame(gene_data)

    # Plotting the gene coordinates and lengths
    plot_gene_coordinates(df)

    # Generate CSV report and provide download link
    csv_file = generate_csv_report(df)

    # Returning the CSV download link
    return csv_file

# Sample accessions for the 13 isolates
accession_list = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1", "MW660858.1",
    "MW660857.1", "MW660856.1", "MK990715.1", "MK990714.1", "MK990713.1",
    "MK990712.1", "MK990711.1", "MK990709.1"
]

# Execute the process
csv_file = process_multiple_accessions(accession_list)

# Returning download link
print(f"Download your CSV report from: {csv_file}")





# Install Biopython


# Import required libraries
from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display, FileLink

# Set your email for NCBI Entrez
Entrez.email = "your_email@example.com"

# List of 13 p4a gene isolate accessions from common carp
accession_list = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1", "MW660858.1",
    "MW660857.1", "MW660856.1", "MK990715.1", "MK990714.1", "MK990713.1",
    "MK990712.1", "MK990711.1", "MK990709.1"
]

# Function to fetch chromosome/scaffold info
def fetch_gene_coordinates(accession):
    try:
        handle = Entrez.efetch(db="nucleotide", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()

        for feature in record.features:
            if feature.type == "CDS" and "gene" in feature.qualifiers:
                if "p4a" in feature.qualifiers['gene'][0].lower():
                    location = feature.location
                    gene_start = int(location.start)
                    gene_end = int(location.end)
                    strand = location.strand
                    scaffold = record.name
                    return {
                        "Accession": accession,
                        "Gene": feature.qualifiers['gene'][0],
                        "Start": gene_start,
                        "End": gene_end,
                        "Strand": strand,
                        "Scaffold/Chromosome": scaffold
                    }
        return {
            "Accession": accession,
            "Gene": "p4a",
            "Start": "Not Found",
            "End": "Not Found",
            "Strand": "Not Found",
            "Scaffold/Chromosome": "Not Found"
        }
    except Exception as e:
        return {
            "Accession": accession,
            "Gene": "Error",
            "Start": "Error",
            "End": "Error",
            "Strand": "Error",
            "Scaffold/Chromosome": str(e)
        }

# Fetch data for all accessions
results = [fetch_gene_coordinates(acc) for acc in accession_list]

# Convert to DataFrame
df = pd.DataFrame(results)
display(df)

# Save to CSV
csv_filename = "p4a_gene_coordinates.csv"
df.to_csv(csv_filename, index=False)
display(FileLink(csv_filename))

# Plotting gene length
df_filtered = df[df['Start'] != "Not Found"]
if not df_filtered.empty:
    df_filtered["Length"] = df_filtered["End"].astype(int) - df_filtered["Start"].astype(int)
    plt.figure(figsize=(10, 6))
    plt.bar(df_filtered["Accession"], df_filtered["Length"], color='skyblue')
    plt.title("Gene Lengths of p4a Isolates")
    plt.xlabel("Accession")
    plt.ylabel("Length (bp)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("gene_lengths_plot.png")
    plt.show()
    display(FileLink("gene_lengths_plot.png"))
else:
    print("No gene coordinates found for plotting.")

# Install required libraries


import pandas as pd
import matplotlib.pyplot as plt
st.download_button(...)
import io
import os

# --- User Inputs ---
from IPython.display import display
import ipywidgets as widgets

fish_species = widgets.Text(description='Fish Species:')
organ_name = widgets.Text(description='Organ Name:')
disease_name = widgets.Text(description='Disease:')
gene_symbol = widgets.Text(description='Gene Symbol:')
submit_button = widgets.Button(description="Submit")

inputs_box = widgets.VBox([fish_species, organ_name, disease_name, gene_symbol, submit_button])
display(inputs_box)

# Global container for user inputs
user_inputs = {}

def on_submit_clicked(b):
    user_inputs['Fish Species'] = fish_species.value
    user_inputs['Organ'] = organ_name.value
    user_inputs['Disease'] = disease_name.value
    user_inputs['Gene Symbol'] = gene_symbol.value
    print("\n✅ Inputs submitted. Now upload the GFF3 and metadata files.\n")

submit_button.on_click(on_submit_clicked)

# --- File Upload ---
print("📤 Upload your Gene Annotation (.gff3) file")
uploaded_gff3 = files.upload()

print("📤 Upload your Genome Assembly Info file (.csv or .tsv)")
uploaded_genome_info = files.upload()

print("📤 Upload your Chromosome/Scaffold ID file (.csv)")
uploaded_chrom_info = files.upload()

# --- File Handling ---
def load_uploaded_file(uploaded):
    filename = next(iter(uploaded))
    return pd.read_csv(io.BytesIO(uploaded[filename]), sep=None, engine='python')

# Load files
gff3_file = next(iter(uploaded_gff3))
gff3_df = pd.read_csv(io.BytesIO(uploaded_gff3[gff3_file]), sep='\t', comment='#', header=None, names=[
    'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes'])

genome_info_df = load_uploaded_file(uploaded_genome_info)
chrom_info_df = load_uploaded_file(uploaded_chrom_info)

# --- Gene Mapping Logic ---
gene_name = user_inputs.get('Gene Symbol', '').lower()
filtered_genes = gff3_df[gff3_df['type'] == 'gene']
mapped_genes = filtered_genes[filtered_genes['attributes'].str.contains(gene_name, case=False, na=False)]

if not mapped_genes.empty:
    print(f"✅ Gene '{gene_name}' found in GFF3 file.")
else:
    print(f"❌ Gene '{gene_name}' not found in the annotation file.")

# Join with genome assembly and scaffold info
mapped_genes = mapped_genes.merge(chrom_info_df, left_on='seqid', right_on='Scaffold', how='left')
mapped_genes = mapped_genes.merge(genome_info_df, on='Scaffold', how='left')

# --- Display and Save Output ---
output_csv = "/content/mapped_gene_coordinates.csv"
mapped_genes.to_csv(output_csv, index=False)
print(f"\n📁 Mapped gene information saved to: {output_csv}")
files.download(output_csv)

# --- Visualization ---
plt.figure(figsize=(10, 6))
plt.barh(mapped_genes['seqid'], mapped_genes['end'] - mapped_genes['start'], color='skyblue')
plt.xlabel('Gene Length (bp)')
plt.ylabel('Scaffold/Chromosome')
plt.title(f"Mapped Length of {gene_name} Gene")
plt.tight_layout()
plt.savefig('/content/gene_mapping_plot.png')
plt.show()

files.download('/content/gene_mapping_plot.png')



# Install required libraries


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from Bio import Entrez, SeqIO
from io import StringIO
import requests
from google.colab import files

# Step 1: Fetching gene data using NCBI Entrez API

def fetch_gene_data(accession_id):
    try:
        # Searching for the accession
        Entrez.email = "your-email@example.com"  # Use your email
        handle = Entrez.efetch(db="nucleotide", id=accession_id, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()

        # Extracting relevant information
        gene_info = {
            'Accession': record.id,
            'Gene Product': record.description,
            'Length': len(record.seq),
            'Sequence': record.seq
        }

        return gene_info

    except Exception as e:
        print(f"Error fetching data for {accession_id}: {e}")
        return None

# Step 2: Creating a function to plot data for gene mapping

def plot_gene_coordinates(df):
    # Plotting Gene Length vs Count
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Accession', y='Length', data=df, palette='viridis')
    plt.title('Gene Length vs Accession')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()

    # Plotting Distribution of Gene Sequences
    plt.figure(figsize=(10, 6))
    sns.histplot(df['Length'], kde=True, color='blue')
    plt.title('Distribution of Gene Lengths')
    plt.tight_layout()
    plt.show()

# Step 3: Function to generate a CSV report and prepare it for download

def generate_csv_report(df):
    # Save as CSV
    file_name = "/content/p4a_gene_report.csv"
    df.to_csv(file_name, index=False)
    print(f"CSV report generated at: {file_name}")
    return file_name

# Step 4: Main function to process multiple accessions and visualize results

def process_multiple_accessions(accession_list):
    gene_data = []
    for accession in accession_list:
        data = fetch_gene_data(accession)
        if data:
            gene_data.append(data)

    if not gene_data:
        print("No valid data found for the selected accessions.")
        return

    # Convert to DataFrame for easy visualization
    df = pd.DataFrame(gene_data)

    # Plotting the gene coordinates and lengths
    plot_gene_coordinates(df)

    # Generate CSV report and provide download link
    csv_file = generate_csv_report(df)

    # Provide download link for CSV file
    files.download(csv_file)

    # Returning the CSV download link
    return csv_file

# Sample accessions for the 13 isolates
accession_list = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1", "MW660858.1",
    "MW660857.1", "MW660856.1", "MK990715.1", "MK990714.1", "MK990713.1",
    "MK990712.1", "MK990711.1", "MK990709.1"
]

# Execute the process
csv_file = process_multiple_accessions(accession_list)

# Returning download link
print(f"Download your CSV report from: {csv_file}")
