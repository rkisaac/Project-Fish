# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YzPdFvqbAO4c4iJIbk_6sLX5JMAJ3akG
"""

# Step 1: Install required packages (run this cell first in Colab)
!pip install ipywidgets biopython fpdf matplotlib --quiet

# Step 2: Main Application Code
from IPython.display import display, Image, clear_output
import ipywidgets as widgets
from Bio import Entrez, SeqIO
import matplotlib.pyplot as plt
from fpdf import FPDF
from google.colab import files
import os

# Configure Entrez email
Entrez.email = "your_email@example.com"  # Replace with your actual email

# Prepare output directory
output_dir = "NCBI_Carp_Protein_Output"
os.makedirs(output_dir, exist_ok=True)

# Dropdown options
fish_species = [
    "Common Carp (Cyprinus carpio)", "Grass Carp (Ctenopharyngodon idella)",
    "Silver Carp (Hypophthalmichthys molitrix)", "Catla carp (Cyprinus catla)",
    "Bighead Carp (Hypophthalmichthys nobilis)"
]

fish_organs = ["Gill", "Kidney", "Liver", "Spleen", "Heart", "Intestine"]
genes = ["p4a", "vp8", "ORF16", "CyHV1", "CEV_F1", "CEV_R1", "CEV_F2"]
diseases = ["Carp Edema Virus", "koi herpesvirus", "cyprinid herpesvirus-2"]
protein_list = [
    "Carp edema virus isolate Agnes_661xx2018 P4a core protein (p4a) gene, partial cds",
    "Carp edema virus isolate IR-UT-ZGNARM 40020 4a (p4a) gene, partial cds",
    "Carp edema virus isolate IR-UT-ZGNARM 9360 4a (p4a) gene, partial cds",
    "Carp edema virus isolate IR UT-ZGNARM 9429 4a (p4a) gene, partial cds",
    "Carp edema virus isolate IR-UT-ZGNARM 9171 4a (p4a) gene, partial cds",
    "Carp edema virus isolate IR-UT-ZGNARM 9325 4a (p4a) gene, partial cds",
    "Carp edema virus isolate IR-UT-ZGNARM 9299 4a (p4a) gene, partial cds",
    "Carp edema virus 4a protein (P4a) gene, partial cds",
    "Carp edema virus isolate F238 4a protein (P4a) gene, partial cds",
    "Carp edema virus isolate LE2 4a protein (P4a) gene, partial cds",
    "Carp edema virus isolate LE1 4a protein (P4a) gene, partial cds",
    "Carp edema virus isolate F129 4a protein (P4a) gene, partial cds",
    "Carp edema virus isolate F14 4a protein (P4a) gene, partial cds"
]

# Widgets
species_dropdown = widgets.Dropdown(options=fish_species, description="Species:")
organ_dropdown = widgets.Dropdown(options=fish_organs, description="Organ:")
gene_dropdown = widgets.Dropdown(options=genes, description="Gene:")
disease_dropdown = widgets.Dropdown(options=diseases, description="Disease:")
protein_dropdown = widgets.Dropdown(options=protein_list, description="Protein:")
show_text = widgets.Checkbox(value=True, description='Show GenBank Record')
show_image = widgets.Checkbox(value=True, description='Show Image Plot')
download_text = widgets.Checkbox(value=True, description='Download GenBank File')
download_image = widgets.Checkbox(value=True, description='Download Image File')
download_pdf = widgets.Checkbox(value=True, description='Download PDF Report')
search_button = widgets.Button(description="üîç Search Protein")

# Display interface
display(widgets.VBox([
    widgets.Label("Select Details for Protein Search"),
    species_dropdown,
    organ_dropdown,
    gene_dropdown,
    disease_dropdown,
    protein_dropdown,
    show_text, show_image,
    download_text, download_image, download_pdf,
    search_button
]))

def search_protein(b):
    clear_output(wait=True)
    display(widgets.VBox([
        widgets.Label("Select Details for Protein Search"),
        species_dropdown,
        organ_dropdown,
        gene_dropdown,
        disease_dropdown,
        protein_dropdown,
        show_text, show_image,
        download_text, download_image, download_pdf,
        search_button
    ]))

    if species_dropdown.value != "Common Carp (Cyprinus carpio)" or organ_dropdown.value != "Gill" or gene_dropdown.value != "p4a" or disease_dropdown.value != "Carp Edema Virus":
        print("‚ö†Ô∏è Please match: Common Carp, Gill, p4a, Carp Edema Virus to run the protein search.")
        return

    search_term = protein_dropdown.value
    print(f"üîç Searching NCBI Protein Database for:\n{search_term}")

    handle = Entrez.esearch(db="protein", term=search_term, retmax=1)
    result = Entrez.read(handle)
    handle.close()

    if not result['IdList']:
        print("‚ùå No matching protein record found.")
        return

    protein_id = result['IdList'][0]
    print(f"‚úÖ Protein ID Found: {protein_id}")

    handle = Entrez.efetch(db="protein", id=protein_id, rettype="gb", retmode="text")
    protein_text = handle.read()
    handle.close()

    genbank_path = os.path.join(output_dir, "selected_protein.txt")
    with open(genbank_path, "w") as f:
        f.write(protein_text)

    seq_record = SeqIO.read(Entrez.efetch(db="protein", id=protein_id, rettype="gb", retmode="text"), "genbank")
    seq_len = len(seq_record.seq)

    img_path = os.path.join(output_dir, "protein_length_plot.png")
    plt.figure(figsize=(6, 1.5))
    plt.barh(["Selected Protein"], [seq_len], color='skyblue')
    plt.xlabel("Amino Acid Length")
    plt.title("Protein Length Plot")
    plt.tight_layout()
    plt.savefig(img_path)
    plt.close()

    if show_text.value:
        print("\nüìÑ GenBank Record (Truncated):\n")
        print(protein_text[:1200] + "\n...[truncated]...")

    if show_image.value:
        print("üñº Visualizing Sequence Length:")
        display(Image(img_path))

    if download_text.value:
        files.download(genbank_path)

    if download_image.value:
        files.download(img_path)

    if download_pdf.value:
        pdf_path = os.path.join(output_dir, "protein_report.pdf")
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", "B", 14)
        pdf.cell(200, 10, "Selected Protein Report", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 5, protein_text[:2500] + "\n...[truncated]...")
        pdf.image(img_path, w=180)
        pdf.output(pdf_path)
        files.download(pdf_path)

search_button.on_click(search_protein)

# Step 1: Install Biopython if not already installed
!pip install biopython

# Step 2: Import required libraries
from Bio import Entrez, SeqIO
import pandas as pd

# Step 3: Set email (NCBI requires it)
Entrez.email = "your_email@example.com"  # Replace with your email

# Step 4: Define the search term
search_term = '"Carp edema virus isolate Agnes_661xx2018 P4a core protein (p4a) gene"'

# Step 5: Search NCBI Nucleotide database for the gene
handle = Entrez.esearch(db="nucleotide", term=search_term, retmax=1)
record = Entrez.read(handle)
handle.close()

# Check if anything was found
if record['IdList']:
    nucleotide_id = record['IdList'][0]
    print(f"NCBI Nucleotide ID found: {nucleotide_id}")

    # Step 6: Fetch the record
    handle = Entrez.efetch(db="nucleotide", id=nucleotide_id, rettype="gb", retmode="text")
    seq_record = SeqIO.read(handle, "genbank")
    handle.close()

    # Step 7: Extract details
    gene_info = []
    for feature in seq_record.features:
        if feature.type == "CDS":
            protein_id = feature.qualifiers.get('protein_id', [""])[0]
            product = feature.qualifiers.get('product', [""])[0]
            translation = feature.qualifiers.get('translation', [""])[0]
            gene_info.append({
                "Protein ID": protein_id,
                "Product": product,
                "Protein Sequence": translation,
                "Length (aa)": len(translation)
            })

    # Step 8: Display results in DataFrame
    df = pd.DataFrame(gene_info)
    display(df)

    # Step 9: Save to CSV (optional)
    df.to_csv("carp_edema_p4a_protein_details.csv", index=False)
    print("Protein details saved to CSV.")

else:
    print("No results found for the given gene search.")

# Install Biopython
!pip install biopython

# Import libraries
from Bio import Entrez, SeqIO
import pandas as pd

# NCBI requires an email
Entrez.email = "your_email@example.com"  # Replace with your email

# Broader search term
search_term = "Carp edema virus p4a"

# Search the Protein database
handle = Entrez.esearch(db="protein", term=search_term, retmax=5)
record = Entrez.read(handle)
handle.close()

# Check if results were found
if record['IdList']:
    protein_data = []

    for protein_id in record['IdList']:
        handle = Entrez.efetch(db="protein", id=protein_id, rettype="gb", retmode="text")
        seq_record = SeqIO.read(handle, "genbank")
        handle.close()

        # Extract relevant details
        protein_data.append({
            "Accession": seq_record.id,
            "Description": seq_record.description,
            "Organism": seq_record.annotations.get("organism", "Unknown"),
            "Sequence Length (aa)": len(seq_record.seq),
            "Protein Sequence": str(seq_record.seq)
        })

    # Display in DataFrame
    df = pd.DataFrame(protein_data)
    display(df)

    # Save to CSV
    df.to_csv("carp_edema_virus_p4a_protein_search_results.csv", index=False)
    print("Protein data saved to 'carp_edema_virus_p4a_protein_search_results.csv'.")

else:
    print("No protein records found using the broader term.")

# Install required library
!pip install biopython

# Imports
from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display, FileLink
import os

# Set your email (required by NCBI)
Entrez.email = "your_email@example.com"  # Replace with your email

# Accession number
accession = "MN316643.1"

# Fetch GenBank record from NCBI
def fetch_genbank(accession):
    handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
    record = SeqIO.read(handle, "genbank")
    handle.close()
    return record

# Extract protein-related info
def extract_protein_info(record):
    protein_data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            protein_data.append({
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": feature.qualifiers.get("translation", [""])[0],
                "Length (Amino Acids)": len(feature.qualifiers.get("translation", [""])[0])
            })
    return protein_data

# Plot protein lengths
def plot_lengths(proteins):
    ids = [p["Protein ID"] for p in proteins]
    lengths = [p["Length (Amino Acids)"] for p in proteins]

    plt.figure(figsize=(10, 6))
    bars = plt.barh(ids, lengths, color="teal")
    plt.xlabel("Length (Amino Acids)")
    plt.title("Protein Lengths from Accession MN316643.1")
    for bar in bars:
        plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f'{int(bar.get_width())}', va='center')
    plt.tight_layout()
    plt.savefig("protein_lengths.png")
    plt.show()

# Save CSV
def save_csv(proteins, filename="protein_details.csv"):
    df = pd.DataFrame(proteins)
    df.to_csv(filename, index=False)
    return filename

# Main execution
record = fetch_genbank(accession)
proteins = extract_protein_info(record)

# Display results
if proteins:
    df = pd.DataFrame(proteins)
    display(df)

    # Save CSV and show link
    csv_file = save_csv(proteins)
    print("\nüìÑ CSV file ready for download:")
    display(FileLink(csv_file))

    # Plot lengths and save figure
    plot_lengths(proteins)
    print("\nüñºÔ∏è Image ready for download:")
    display(FileLink("protein_lengths.png"))
else:
    print("‚ùå No protein data found for this accession.")

# Install Biopython if not already installed
!pip install biopython

from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display, FileLink
import seaborn as sns

# Set your email for NCBI
Entrez.email = "your_email@example.com"  # Replace this

# Fetch the GenBank record
def fetch_genbank(accession):
    handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
    record = SeqIO.read(handle, "genbank")
    handle.close()
    return record

# Extract protein features
def extract_protein_data(record):
    protein_data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            protein_data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return protein_data

# Save CSV
def save_csv(df, filename="protein_details.csv"):
    df.to_csv(filename, index=False)
    return filename

# Plot: Protein ID vs Length
def plot_protein_lengths(df):
    plt.figure(figsize=(10, 6))
    sns.barplot(data=df, x="Length (Amino Acids)", y="Protein ID", palette="Blues_d")
    plt.title("Protein Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.ylabel("Protein ID")
    plt.tight_layout()
    plt.savefig("protein_length_bar.png")
    plt.show()

# Plot: Sequence Length vs Count (Histogram)
def plot_length_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length (Amino Acids)"], bins=10, kde=True, color="orange")
    plt.title("Sequence Length Distribution")
    plt.xlabel("Sequence Length (Amino Acids)")
    plt.ylabel("Count")
    plt.tight_layout()
    plt.savefig("sequence_length_hist.png")
    plt.show()

# Plot: Accession vs Protein Sequence (Text Preview)
def plot_accession_vs_sequence(df):
    plt.figure(figsize=(10, len(df) * 0.8))
    y_labels = df["Accession"] + " / " + df["Protein ID"]
    seqs = df["Protein Sequence"]
    for i, seq in enumerate(seqs):
        plt.text(0.01, len(seqs)-i-1, seq[:60] + "...", fontsize=9)
    plt.yticks(range(len(seqs)), y_labels)
    plt.xticks([])
    plt.title("Accession vs Protein Sequence (Preview)")
    plt.tight_layout()
    plt.savefig("accession_vs_sequence.png")
    plt.show()

# Main program
accession = "MN316643.1"
record = fetch_genbank(accession)
protein_info = extract_protein_data(record)

if protein_info:
    df = pd.DataFrame(protein_info)
    display(df)

    # Save CSV and show download link
    csv_file = save_csv(df)
    print("üìÑ CSV Download:")
    display(FileLink(csv_file))

    # Create and show/save all figures
    plot_protein_lengths(df)
    plot_length_histogram(df)
    plot_accession_vs_sequence(df)

    # Show image download links
    print("üñºÔ∏è Image Downloads:")
    display(FileLink("protein_length_bar.png"))
    display(FileLink("sequence_length_hist.png"))
    display(FileLink("accession_vs_sequence.png"))
else:
    print("‚ùå No protein data found for this accession.")

# Install Biopython if needed
!pip install biopython

from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display, FileLink
import seaborn as sns

# Set your email for NCBI access
Entrez.email = "your_email@example.com"  # <-- Replace with your email

# List of Accessions
accessions = ["MN316643.1", "MW915530.1", "MW915530.1"]

# Fetch GenBank records
def fetch_genbank(accession):
    try:
        handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"Error fetching {accession}: {e}")
        return None

# Extract protein data from GenBank record
def extract_protein_data(record):
    protein_data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            protein_data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return protein_data

# Save as CSV
def save_csv(df, filename="protein_details.csv"):
    df.to_csv(filename, index=False)
    return filename

# Plot protein lengths by accession
def plot_protein_lengths(df):
    plt.figure(figsize=(10, 6))
    sns.barplot(data=df, x="Length (Amino Acids)", y="Protein ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("protein_length_bar.png")
    plt.show()

# Plot length distribution
def plot_length_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length (Amino Acids)"], bins=10, kde=True, color="teal")
    plt.title("Sequence Length Distribution")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("sequence_length_hist.png")
    plt.show()

# Plot Accession vs Protein Sequence preview
def plot_accession_vs_sequence(df):
    plt.figure(figsize=(10, len(df) * 0.7))
    y_labels = df["Accession"] + " / " + df["Protein ID"]
    seqs = df["Protein Sequence"]
    for i, seq in enumerate(seqs):
        plt.text(0.01, len(seqs)-i-1, seq[:60] + "...", fontsize=9)
    plt.yticks(range(len(seqs)), y_labels)
    plt.xticks([])
    plt.title("Accession vs Protein Sequence (Preview)")
    plt.tight_layout()
    plt.savefig("accession_vs_sequence.png")
    plt.show()

# Master program
all_data = []
for acc in accessions:
    record = fetch_genbank(acc)
    if record:
        all_data.extend(extract_protein_data(record))

if all_data:
    df = pd.DataFrame(all_data)
    display(df)

    # Save CSV and provide download link
    csv_file = save_csv(df)
    print("üìÑ Download CSV:")
    display(FileLink(csv_file))

    # Generate and show plots
    plot_protein_lengths(df)
    plot_length_histogram(df)
    plot_accession_vs_sequence(df)

    # Image download links
    print("üñºÔ∏è Download Figures:")
    display(FileLink("protein_length_bar.png"))
    display(FileLink("sequence_length_hist.png"))
    display(FileLink("accession_vs_sequence.png"))
else:
    print("‚ùå No protein data found for given accessions.")

# Install required packages
!pip install biopython seaborn

from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, FileLink

# Set email for NCBI
Entrez.email = "rajendra.isaac@gmail.com"  # ‚Üê Replace with your valid email

# Input: list of accession numbers
accessions = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1", "MW660858.1",
    "MW660857.1", "MW660856.1", "MK990715.1", "MK990714.1", "MK990713.1",
    "MK990712.1", "MK990711.1", "MK990709.1"
]

# Fetch GenBank records
def fetch_genbank(accession):
    try:
        handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"Error fetching {accession}: {e}")
        return None

# Extract protein info from GenBank record
def extract_protein_data(record):
    data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return data

# Save DataFrame as CSV
def save_csv(df, filename="protein_details.csv"):
    df.to_csv(filename, index=False)
    return filename

# Plotting functions
def plot_protein_lengths(df):
    plt.figure(figsize=(12, 6))
    sns.barplot(data=df, x="Length (Amino Acids)", y="Protein ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("protein_length_bar.png")
    plt.show()

def plot_length_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length (Amino Acids)"], bins=10, kde=True, color="steelblue")
    plt.title("Distribution of Protein Sequence Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("length_distribution_hist.png")
    plt.show()

def plot_sequence_preview(df):
    plt.figure(figsize=(10, len(df) * 0.7))
    y_labels = df["Accession"] + " / " + df["Protein ID"]
    seqs = df["Protein Sequence"]
    for i, seq in enumerate(seqs):
        plt.text(0.01, len(seqs) - i - 1, seq[:60] + "...", fontsize=9)
    plt.yticks(range(len(seqs)), y_labels)
    plt.xticks([])
    plt.title("Accession vs Protein Sequence Preview")
    plt.tight_layout()
    plt.savefig("accession_vs_sequence.png")
    plt.show()

# Master script
all_protein_data = []
for acc in accessions:
    record = fetch_genbank(acc)
    if record:
        all_protein_data.extend(extract_protein_data(record))

if all_protein_data:
    df = pd.DataFrame(all_protein_data)
    display(df)

    # Save CSV
    csv_file = save_csv(df)
    print("üìÅ CSV File:")
    display(FileLink(csv_file))

    # Create and save plots
    plot_protein_lengths(df)
    plot_length_histogram(df)
    plot_sequence_preview(df)

    # Provide image download links
    print("üñºÔ∏è Recommended Plots for Download:")
    display(FileLink("protein_length_bar.png"))
    display(FileLink("length_distribution_hist.png"))
    display(FileLink("accession_vs_sequence.png"))

else:
    print("‚ùå No valid protein data found.")

"""# New section

# New section
"""

# Install required packages
!pip install biopython seaborn

# Imports
from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, FileLink
import ipywidgets as widgets
from IPython.display import display as ipydisplay

# Setup NCBI email
Entrez.email = "your_email@example.com"  # Replace with your email

# Widget for user input
accession_input = widgets.Text(
    value="MN316643.1, MW915530.1",
    placeholder='Enter accession numbers separated by commas',
    description='Accessions:',
    layout=widgets.Layout(width='100%')
)
ipydisplay(accession_input)

# Button to trigger the search
search_button = widgets.Button(description="Fetch Protein Details")
ipydisplay(search_button)

# Function to fetch a GenBank record
def fetch_genbank(accession):
    try:
        handle = Entrez.efetch(db="nuccore", id=accession.strip(), rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"Error fetching {accession}: {e}")
        return None

# Extract protein data from a GenBank record
def extract_protein_data(record):
    data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return data

# Save DataFrame to CSV
def save_csv(df, filename="protein_details.csv"):
    df.to_csv(filename, index=False)
    return filename

# Plot: Protein length per accession
def plot_protein_lengths(df):
    plt.figure(figsize=(12, 6))
    sns.barplot(data=df, x="Length (Amino Acids)", y="Protein ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("protein_length_bar.png")
    plt.show()

# Plot: Sequence length distribution
def plot_length_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length (Amino Acids)"], bins=10, kde=True, color="steelblue")
    plt.title("Distribution of Protein Sequence Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("length_distribution_hist.png")
    plt.show()

# Plot: Sequence preview
def plot_sequence_preview(df):
    plt.figure(figsize=(10, len(df) * 0.6))
    y_labels = df["Accession"] + " / " + df["Protein ID"]
    for i, seq in enumerate(df["Protein Sequence"]):
        plt.text(0.01, len(df) - i - 1, seq[:60] + "...", fontsize=9)
    plt.yticks(range(len(df)), y_labels)
    plt.xticks([])
    plt.title("Accession vs Protein Sequence Preview")
    plt.tight_layout()
    plt.savefig("accession_vs_sequence.png")
    plt.show()

# Event handler for the button
def on_search_clicked(b):
    accessions = [acc.strip() for acc in accession_input.value.split(",") if acc.strip()]
    all_data = []
    for acc in accessions:
        record = fetch_genbank(acc)
        if record:
            all_data.extend(extract_protein_data(record))

    if all_data:
        df = pd.DataFrame(all_data)
        display(df)

        # Save CSV
        csv_path = save_csv(df)
        print("\nüìÅ CSV File:")
        display(FileLink(csv_path))

        # Generate and save plots
        plot_protein_lengths(df)
        plot_length_histogram(df)
        plot_sequence_preview(df)

        print("\nüñºÔ∏è Downloadable Plot Images:")
        display(FileLink("protein_length_bar.png"))
        display(FileLink("length_distribution_hist.png"))
        display(FileLink("accession_vs_sequence.png"))
    else:
        print("‚ùå No valid protein data found.")

# Attach button click event
search_button.on_click(on_search_clicked)

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(_df_15['Accession'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(_df_15, x='Length (Amino Acids)', y='Accession', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

# Install required packages
!pip install biopython seaborn

from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, FileLink
import ipywidgets as widgets
from IPython.display import display as ipydisplay, clear_output

# NCBI configuration
Entrez.email = "your_email@example.com"  # Replace with your real email

# Define accession options
accession_list = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1",
    "MW660858.1", "MW660857.1", "MW660856.1", "MK990715.1",
    "MK990714.1", "MK990713.1", "MK990712.1", "MK990711.1", "MK990709.1"
]

# Multi-select checkbox widget
accession_checkboxes = widgets.SelectMultiple(
    options=accession_list,
    description='Accessions:',
    layout=widgets.Layout(width='100%', height='200px')
)

# Button to run
search_button = widgets.Button(description="Fetch Protein Info")
ipydisplay(accession_checkboxes, search_button)

# Function to fetch GenBank record
def fetch_genbank(accession):
    try:
        handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"‚ùå Error fetching {accession}: {e}")
        return None

# Extract protein data
def extract_protein_data(record):
    data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return data

# Save DataFrame
def save_csv(df, filename="protein_details.csv"):
    df.to_csv(filename, index=False)
    return filename

# Plots
def plot_protein_lengths(df):
    plt.figure(figsize=(12, 6))
    sns.barplot(data=df, x="Length (Amino Acids)", y="Protein ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("protein_length_bar.png")
    plt.show()

def plot_length_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length (Amino Acids)"], bins=10, kde=True, color="steelblue")
    plt.title("Distribution of Protein Sequence Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("length_distribution_hist.png")
    plt.show()

def plot_sequence_preview(df):
    plt.figure(figsize=(10, len(df) * 0.6))
    y_labels = df["Accession"] + " / " + df["Protein ID"]
    for i, seq in enumerate(df["Protein Sequence"]):
        plt.text(0.01, len(df) - i - 1, seq[:60] + "...", fontsize=9)
    plt.yticks(range(len(df)), y_labels)
    plt.xticks([])
    plt.title("Accession vs Protein Sequence Preview")
    plt.tight_layout()
    plt.savefig("accession_vs_sequence.png")
    plt.show()

# Event handler
def on_search_clicked(b):
    clear_output(wait=True)
    ipydisplay(accession_checkboxes, search_button)

    selected = accession_checkboxes.value
    if not selected:
        print("‚ö†Ô∏è Please select at least one accession.")
        return

    all_data = []
    for acc in selected:
        record = fetch_genbank(acc)
        if record:
            all_data.extend(extract_protein_data(record))

    if all_data:
        df = pd.DataFrame(all_data)
        display(df)

        csv_path = save_csv(df)
        print("\nüìÅ CSV File:")
        display(FileLink(csv_path))

        # Plots
        plot_protein_lengths(df)
        plot_length_histogram(df)
        plot_sequence_preview(df)

        print("\nüñºÔ∏è Downloadable Plot Images:")
        display(FileLink("protein_length_bar.png"))
        display(FileLink("length_distribution_hist.png"))
        display(FileLink("accession_vs_sequence.png"))
    else:
        print("‚ùå No protein data found.")

# Connect button
search_button.on_click(on_search_clicked)

# Install required packages
!pip install biopython seaborn

from Bio import Entrez, SeqIO
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, FileLink, clear_output
import ipywidgets as widgets

# NCBI Email
Entrez.email = "rajendra.isaac@gmail.com"  # Replace with your email

# List of accession numbers
accession_list = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1",
    "MW660858.1", "MW660857.1", "MW660856.1", "MK990715.1",
    "MK990714.1", "MK990713.1", "MK990712.1", "MK990711.1", "MK990709.1"
]

# Widget to select accessions
accession_checkboxes = widgets.SelectMultiple(
    options=accession_list,
    description='Accessions:',
    layout=widgets.Layout(width='100%', height='200px'),
    style={'description_width': 'initial'}
)

# Search button
search_button = widgets.Button(description="Search Protein Details", button_style='success')

# Display UI
display(accession_checkboxes, search_button)

# Function to fetch data
def fetch_genbank(accession):
    try:
        handle = Entrez.efetch(db="nuccore", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"‚ùå Error fetching {accession}: {e}")
        return None

# Extract protein data
def extract_protein_data(record):
    data = []
    for feature in record.features:
        if feature.type == "CDS" and "translation" in feature.qualifiers:
            seq = feature.qualifiers["translation"][0]
            data.append({
                "Accession": record.id,
                "Protein ID": feature.qualifiers.get("protein_id", ["N/A"])[0],
                "Product Name": feature.qualifiers.get("product", ["N/A"])[0],
                "Protein Sequence": seq,
                "Length (Amino Acids)": len(seq)
            })
    return data

# Save CSV
def save_csv(df):
    df.to_csv("protein_data.csv", index=False)
    return "protein_data.csv"

# Plot 1: Bar chart
def plot_length_bar(df):
    plt.figure(figsize=(10, max(4, len(df) * 0.5)))
    sns.barplot(data=df, x="Length_(Amino_Acids)", y="Protein_ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("plot_length_bar.png")
    plt.show()

# Plot 2: Histogram
def plot_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length_(Amino_Acids)"], bins=10, kde=True, color='teal')
    plt.title("Distribution of Protein Sequence Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("plot_histogram.png")
    plt.show()

# Plot 3: Accession vs Protein Sequence Preview
def plot_sequence_preview(df):
    plt.figure(figsize=(12, len(df) * 0.6))
    for i, row in enumerate(df.itertuples()):
        plt.text(0.01, len(df) - i - 1, f"{row.Accession} - {row.Protein_ID}: {row.Protein_Sequence[:60]}...", fontsize=9)
    plt.yticks([])
    plt.xticks([])
    plt.title("Accession vs Protein Sequence (preview)")
    plt.tight_layout()
    plt.savefig("plot_sequence_preview.png")
    plt.show()

# Button click handler
def on_search_clicked(b):
    clear_output(wait=True)
    display(accession_checkboxes, search_button)

    selected_accessions = list(accession_checkboxes.value)
    if not selected_accessions:
        print("‚ö†Ô∏è Please select at least one accession number.")
        return

    all_data = []
    for acc in selected_accessions:
        record = fetch_genbank(acc)
        if record:
            all_data.extend(extract_protein_data(record))

    if not all_data:
        print("‚ùå No protein data retrieved.")
        return

    # Display data
    df = pd.DataFrame(all_data)
    df.columns = [col.replace(" ", "_") for col in df.columns]  # Clean column names
    display(df)

    # Save CSV
    csv_file = save_csv(df)
    print("\nüìÑ Download CSV File:")
    display(FileLink(csv_file))

    # Generate and show plots
    plot_length_bar(df)
    plot_histogram(df)
    plot_sequence_preview(df)

    # Download links for plots
    print("\nüñºÔ∏è Download Plots:")
    display(FileLink("plot_length_bar.png"))
    display(FileLink("plot_histogram.png"))
    display(FileLink("plot_sequence_preview.png"))

# Connect button to function
search_button.on_click(on_search_clicked)

import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display
import ipywidgets as widgets
from xml.etree import ElementTree

# Function to fetch protein data from NCBI for an accession
def fetch_protein_data(accession):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=protein&id={accession}&retmode=xml"
    try:
        response = requests.get(url, timeout=10)  # Set a timeout to prevent hanging
        response.raise_for_status()  # Will raise an HTTPError for bad responses
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data for {accession}: {e}")
        return None

    try:
        # Parse the XML response
        root = ElementTree.fromstring(response.content)

        # Find relevant information in the XML
        protein_id = root.find(".//Item[@Name='Name']").text if root.find(".//Item[@Name='Name']") else "N/A"
        product_name = root.find(".//Item[@Name='Title']").text if root.find(".//Item[@Name='Title']") else "N/A"
        protein_sequence = root.find(".//Item[@Name='Sequence']").text if root.find(".//Item[@Name='Sequence']") else "N/A"
        sequence_length = len(protein_sequence) if protein_sequence else 0

        return {
            "Accession": accession,
            "Protein_ID": protein_id,
            "Product_name": product_name,
            "Protein_Sequence": protein_sequence,
            "Length_(Amino_Acids)": sequence_length
        }

    except ElementTree.ParseError as e:
        print(f"Error parsing data for {accession}: {e}")
        return None

# Function to display protein details
def display_protein_details(data):
    df = pd.DataFrame(data)
    display(df)
    return df

# Plot 1: Bar chart for protein length
def plot_length_bar(df):
    plt.figure(figsize=(10, max(4, len(df) * 0.5)))
    sns.barplot(data=df, x="Length_(Amino_Acids)", y="Protein_ID", hue="Accession", dodge=False)
    plt.title("Protein Lengths per Accession")
    plt.tight_layout()
    plt.savefig("plot_length_bar.png")
    plt.show()

# Plot 2: Histogram for protein length distribution
def plot_histogram(df):
    plt.figure(figsize=(8, 5))
    sns.histplot(df["Length_(Amino_Acids)"], bins=10, kde=True, color='teal')
    plt.title("Distribution of Protein Sequence Lengths")
    plt.xlabel("Length (Amino Acids)")
    plt.tight_layout()
    plt.savefig("plot_histogram.png")
    plt.show()

# Plot 3: Accession vs Protein Sequence (Preview)
def plot_sequence_preview(df):
    plt.figure(figsize=(12, len(df) * 0.6))
    for i, row in enumerate(df.itertuples()):
        plt.text(0.01, len(df) - i - 1, f"{row.Accession} - {row.Protein_ID}: {row.Protein_Sequence[:60]}...", fontsize=9)
    plt.yticks([])
    plt.xticks([])
    plt.title("Accession vs Protein Sequence (Preview)")
    plt.tight_layout()
    plt.savefig("plot_sequence_preview.png")
    plt.show()

# Function to save figures and CSV file for download
def save_files(df):
    # Saving CSV file
    df.to_csv('protein_data.csv', index=False)

    # Providing download links for figures
    return {
        "CSV": "protein_data.csv",
        "Length Bar Plot": "plot_length_bar.png",
        "Histogram Plot": "plot_histogram.png",
        "Sequence Preview Plot": "plot_sequence_preview.png"
    }

# Function to handle search button click
def on_search_clicked(b):
    selected_accessions = [accession for accession, selected in accession_checkboxes.items() if selected]
    protein_data = []

    # Fetch data for each accession
    for accession in selected_accessions:
        data = fetch_protein_data(accession)
        if data:
            protein_data.append(data)

    if protein_data:
        # Display protein details
        df = display_protein_details(protein_data)

        # Plot figures
        plot_length_bar(df)
        plot_histogram(df)
        plot_sequence_preview(df)

        # Save files
        download_links = save_files(df)

        # Display download links
        for label, file in download_links.items():
            print(f"Download {label}: {file}")
    else:
        print("No valid data found for the selected accessions.")

# List of accession numbers
accessions = [
    "MN316643.1", "MW915530.1", "MW660860.1", "MW660859.1", "MW660858.1",
    "MW660857.1", "MW660856.1", "MK990715.1", "MK990714.1", "MK990713.1",
    "MK990712.1", "MK990711.1", "MK990709.1"
]

# Create checkboxes for selecting accession numbers
accession_checkboxes = {accession: widgets.Checkbox(value=False, description=accession) for accession in accessions}

# Search button
search_button = widgets.Button(description="Search")
search_button.on_click(on_search_clicked)

# Display checkboxes and button
display(widgets.VBox(list(accession_checkboxes.values())), search_button)